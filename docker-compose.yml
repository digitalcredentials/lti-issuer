version: "2.4"

services:
  db:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    labels:
      - "traefik.tcp.services.postgres.loadbalancer.server.port=5432"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres.entrypoints=postgres"
      - "traefik.tcp.routers.postgres.service=postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U credadmin -d credadmin"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    environment:
      NODE_ENV: production
      TRUST_PROXY: uniquelocal
      LTI_KEY: $LTI_KEY
      LTI_SECRET: $LTI_SECRET
      DB_HOST: db
      CRED_ADMIN_URL: http://cred-admin:3000/api
    labels:
      - "traefik.http.routers.web.rule=Host(`dev.127.0.0.1.nip.io`)"
      - "traefik.http.routers.web.tls=true"
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "3000"

  cred-admin:
    image: digcreds/cred-admin
    environment:
      CA_DB_CONNECTION_URL: "postgres://credadmin:admin_cred_access@db:5432/credadmin"
      OIDC_ISSUER_URL: http://oauth:8080/default
      PUBLIC_URL: https://cred.127.0.0.1.nip.io
    labels:
      - "traefik.http.routers.credadmin.rule=Host(`cred.127.0.0.1.nip.io`)"
      - "traefik.http.routers.credadmin.tls=true"
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "3000"

  oauth:
    image: ghcr.io/navikt/mock-oauth2-server:0.4.1
    expose:
      - "8080"
    labels:
      - "traefik.http.routers.oauth.rule=Host(`oauth.127.0.0.1.nip.io`)"
      - "traefik.http.routers.oauth.tls=true"

  reverse-proxy:
    image: traefik:v2.0
    ports:
      - "80:80"
      - "443:443"
      - "5432:5432"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $HOME/certs:/data/traefik:ro
      - ./traefik:/etc/traefik:ro

volumes:
  postgres_data:
